{"version":3,"file":"component---src-pages-v-mdx-parent-file-name-tsx-content-file-path-src-blog-shadcn-ui-mdx-1e81e1e603a53d70fc8b.js","mappings":"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","sources":["webpack://pyjun01-blog/./src/components/OutLink.tsx","webpack://pyjun01-blog/./src/blog/shadcn-ui.mdx","webpack://pyjun01-blog/./src/pages/v/{mdx.parent__(File)__name}.tsx"],"sourcesContent":["import React from 'react';\nimport { AnchorHTMLAttributes } from 'react';\n\nexport function OutLink(props: AnchorHTMLAttributes<HTMLAnchorElement>) {\n  return <a {...props} target='_blank' rel='noreferrer' />;\n}\n","/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport {OutLink} from \"../components/OutLink\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h1: \"h1\",\n    strong: \"strong\",\n    blockquote: \"blockquote\",\n    em: \"em\",\n    code: \"code\",\n    ul: \"ul\",\n    li: \"li\",\n    h2: \"h2\",\n    h3: \"h3\",\n    pre: \"pre\",\n    ol: \"ol\"\n  }, _provideComponents(), props.components), {TableOfContents} = _components;\n  if (!TableOfContents) _missingMdxReference(\"TableOfContents\", true);\n  return React.createElement(React.Fragment, null, React.createElement(\"figure\", null, React.createElement(\"img\", {\n    src: \"/shadcn-ui/shadcn-ui.png\"\n  })), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://github.com/naver/fe-news/blob/master/issues/2024-02.md#2023-javascript-rising-stars\"\n  }, \"naver/fe-news\"), \"를 보던 중 2023년 한 해 동안 가장 많은 Github Star를 받은 JavaScript 프로젝트들에 대한 글을 발견했다.\"), \"\\n\", React.createElement(_components.p, null, \"제일 Star를 많이 받은 JavaScript 프로젝트는 무엇이엇을까? Bun? Excalidraw? StyleX? 모두 훌륭하지만, 정답은 \", React.createElement(OutLink, {\n    href: \"https://github.com/shadcn-ui/ui\"\n  }, \"shadcn/ui\"), \"이다.\"), \"\\n\", React.createElement(_components.p, null, \"UI 도구가 Excalidraw와 Bun을 제쳤다는 게 굉장히 신기하지 않은가? 사실 shadcn/ui의 인기에는 몇 가지 특수성이 있었기 때문에 2024년의 2분기인 현재에도 여전히 사용해 보지 않았거나 친숙하지 않은 React 개발자들이 꽤 많을 거라 생각한다.\"), \"\\n\", React.createElement(_components.p, null, \"이 글은 shadcn/ui의 정체와 개념, 동작 방식을 탐구하는 글이다.\"), \"\\n\", React.createElement(OutLink, {\n    href: \"https://star-history.com/#shadcn-ui/ui&Date\"\n  }, React.createElement(\"figure\", null, React.createElement(\"picture\", null, React.createElement(\"source\", {\n    media: \"(prefers-color-scheme: dark)\",\n    srcset: \"https://api.star-history.com/svg?repos=shadcn-ui/ui&type=Date&theme=dark\"\n  }), React.createElement(\"source\", {\n    media: \"(prefers-color-scheme: light)\",\n    srcset: \"https://api.star-history.com/svg?repos=shadcn-ui/ui&type=Date\"\n  }), React.createElement(\"img\", {\n    alt: \"Star History Chart\",\n    src: \"https://api.star-history.com/svg?repos=shadcn-ui/ui&type=Date\"\n  })), React.createElement(\"figcaption\", null, \"Star History Chart\"))), \"\\n\", React.createElement(TableOfContents), \"\\n\", React.createElement(_components.h1, null, \"shadcn/ui\"), \"\\n\", React.createElement(_components.p, null, \"shadcn/ui는 Vercel의 \", React.createElement(_components.a, {\n    href: \"https://twitter.com/shadcn\"\n  }, \"shadcn\"), \"이 만든 UI 도구로, **Radix UI(Primitives)**와 \", React.createElement(_components.strong, null, \"Tailwind CSS\"), \"라는 상당히 최신 기술을 기반으로 하는 Component Collection이다. shadcn/ui가 많은 관심을 받은 이유 중 하나가 바로 스스로 **\\\"component library\\\"**를 거부하고 **\\\"component collection\\\"**이라 소개하기 때문이다.\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"This is \", React.createElement(_components.em, null, \"NOT\"), \" a component library. It's a collection of re-usable components that you can copy and paste into your apps.\", React.createElement(\"br\"), \"\\n- shadcn/ui (Introduction)\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"component collection? library? 단순한 말장난 같지만, 제작자의 의도를 명확하게 하자면 이렇다.\"), \"\\n\", React.createElement(_components.p, null, \"기존의 전통적인 컴포넌트 library들은 \", React.createElement(_components.strong, null, \"번들된 소스 코드\"), \"를 패키지 매니저를 통해 \", React.createElement(_components.strong, null, \"프로젝트 의존성\"), \"에 추가해 사용한다. 이와 달리 shadcn/ui는 \", React.createElement(_components.strong, null, \"번들되지 않은 컴포넌트 소스 코드\"), \"를 프로젝트에 의존성으로 추가하지 않고, 말 그대로 \", React.createElement(_components.strong, null, \"복붙\"), \"해서 컴포넌트 코드를 온전히 사용할 수 있다.\", React.createElement(\"br\"), \"이런 독특한 방식으로 딱 사용자가 원하는 컴포넌트만 골라서 가져가면 되기 때문에 \\\"library\\\"가 아닌 \\\"collection\\\"이라 칭하는 것이다.\"), \"\\n\", React.createElement(_components.p, null, \"사용을 위해서는 npm 설치 없이 \", React.createElement(_components.code, null, \"npx shadcn-ui <command>\"), \" 형태의 npx 명령어만 사용하거나 직접 사이트에서 가져가면 된다. (npx 명령어를 실행될 때 컴포넌트 복붙과 의존성 추가가 자동으로 이루어진다)\"), \"\\n\", React.createElement(\"figure\", null, React.createElement(\"img\", {\n    src: \"/shadcn-ui/compare.png\"\n  }), React.createElement(\"figcaption\", null, \"Library vs shadcn/ui\")), \"\\n\", React.createElement(_components.p, null, \"컴포넌트 설치를 의존성으로 하지 않는다는 건 결국 컴포넌트 설치(복붙)이후의 \", React.createElement(_components.strong, null, \"코드와 번들링에 대한 관리 책임\"), \"이 패키지 사용자에게로 넘어간다는 것인데, 이는 사용자와 제작자 모두에게 유의미한 장점을 제공한다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"패키지 사용자 입장: 책임을 넘겨받는다는 게 부정적으로 보일 수 있지만, 기존 외부 lib 컴포넌트를 사용할 때 존재하던 \", React.createElement(_components.strong, null, \"커스터마이징 제약\"), \", \", React.createElement(_components.strong, null, \"불필요한 번들 크기 증가\"), \"와 같은 pain point가 사라진다. 필요한 컴포넌트만 복붙하고 자유롭게 커스터마이징하며 사용하면 된다.\"), \"\\n\", React.createElement(_components.li, null, \"패키지 제작자 입장: \", React.createElement(_components.strong, null, \"컴포넌트 커스터마이징 지원\"), \", \", React.createElement(_components.strong, null, \"번들링 및 배포\"), \"에 대한 부담이 사라진다. 커스텀 컴포넌트를 제작하고, 소스 코드를 어딘가에 올리고, 이를 다운로드할 수 있는 npx script만 제공하면 된다.\"), \"\\n\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"shadcn/ui의 컴포넌트들이 복잡도가 낮기 때문에 이 모든 게 가능하다.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"외부 lib 컴포넌트에 대한 커스텀이 필요한데 지원이 잘 안될 때 CSS \", React.createElement(_components.code, null, \"!important\"), \"를 사용해 오버라이드하거나, 프로젝트를 clone(or patch)해서 직접 수정하거나, 정 안되면 직접 비슷한 커스텀 컴포넌트를 만드는 경험은 프론트엔드 개발자라면 대부분 가지고 있을 것이다.\"), \"\\n\", React.createElement(_components.p, null, \"이를 디자인과 마크업을 제거해서 해결한 게 Headless UI로 오직 UI에 대한 로직만 library에 포함하고 있다.\", React.createElement(\"br\"), \"\\nshadcn/ui는 여기서 접근 방식을 달리해 컴포넌트 관리 책임을 사용자에게 넘기는 것으로 컴포넌트를 소스 코드 레벨에서 커스터마이징이 가능하게 만들었다. 외부 컴포넌트의 문제점을 컴포넌트 라이브러리를 잘 만드는 방식(Headless UI)이 아니라 설치 방식을 바꾸어 해결한 게 놀랍다.\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"shadcn/ui의 방향성은 외부에서 컴포넌트 기능을 제공하는 것이 아니라 온전히 컴포넌트 소유권을 넘겨주는 것이다.\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, null, \"어떻게 2023년 가장 많은 Star를 받았을까\"), \"\\n\", React.createElement(_components.p, null, \"그렇다면 어떻게 Excalidraw 같은 훌륭한 프로젝트를 제치고 가장 많은 Star를 받을 수 있었을까? 심지어 2024년 5월 현재까지도 Star 상승세가 엄청난데 여기에는 여러 가지 이유가 있다고 생각한다.\"), \"\\n\", React.createElement(\"figure\", null, React.createElement(\"img\", {\n    src: \"/shadcn-ui/p.png\"\n  })), \"\\n\", React.createElement(_components.h3, null, \"v0 UI Generator에서 shadcn/ui를 사용\"), \"\\n\", React.createElement(_components.p, null, \"Vercel이 제작한 v0 AI UI Generator는 프롬프트에 맞는 UI와 코드를 생성하는 도구로, shadcn/ui와 Tailwind CSS를 사용해 코드를 생성한다. AI가 생성하는 소스 코드에 사용된다는 사실만으로 흥미롭지 않은가?\"), \"\\n\", React.createElement(_components.h3, null, \"Tailwind CSS를 기반으로 한 UI 도구\"), \"\\n\", React.createElement(_components.p, null, \"Tailwind CSS는 프론트엔드 생태계에서 뜨거운 감자 같은 녀석이였지만 결국 주류 기술로 자리를 잡았고, 이를 사용한다는 게 인기에 영향을 줬을 것이다. (Radix UI 또한 훌륭한 headless UI 라이브러리이다)\"), \"\\n\", React.createElement(_components.h3, null, \"독특한 컴포넌트 설치 방식\"), \"\\n\", React.createElement(_components.p, null, \"기존에도 이런 방식으로 설치하던 프로젝트가 있었는지 모르곘지만, 필자의 길지 않은 개발자 인생에서는 shadcn/ui를 통해 처음 접했다.\", React.createElement(\"br\"), \"\\n이 방식은 프로젝트 기반의 Primitive Component, 유틸리티, hooks 같은 것들에 매우 효과적인 방식인 것 같고 재밌는 방식이다.\"), \"\\n\", React.createElement(_components.h3, null, \"잘 만들어진 UI Component Collection\"), \"\\n\", React.createElement(_components.p, null, \"이전에 MUI, Ant Design, Chakra UI 같은 잘 만들어진 UI 컴포넌트 도구들이 인기가 있었던 것처럼, shadcn/ui 또한 기본 스타일은 약간 부족해 보일 수 있지만 Radix UI를 기반으로 잘 만든 UI 컴포넌트 도구이다.\"), \"\\n\", React.createElement(_components.h1, null, \"어떻게 사용하는가\"), \"\\n\", React.createElement(_components.p, null, \"사용법은 \", React.createElement(_components.a, {\n    href: \"https://ui.shadcn.com/docs/installation\"\n  }, \"공식 문서\"), \"에 빌드 환경별로 잘 설명되어 있지만 간략하게 남기자면 아래와 같다.\"), \"\\n\", React.createElement(_components.h2, null, \"1. initialize\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"npx shadcn-ui@latest init\"), \" 명령어를 실행하면 아래 질문 중에 프로젝트 환경에 맞는 적절한 것들이 프롬프트로 표시된다. 각 질문에 맞는 값을 입력하면 설정이 완료된다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-cmd\"\n  }, \"- Would you like to use TypeScript (recommended)? › no / yes\\n- Which style would you like to use? › Default\\n- Which color would you like to use as base color? › Slate\\n- Where is your global CSS file? › src/index.css\\n- Do you want to use CSS variables for colors? › no / yes\\n- Are you using a custom tailwind prefix eg. tw-?\\n- Where is your tailwind.config.js located? › tailwind.config.js Leave blank if not) ›\\n- Configure the import alias for components: › @/components\\n- Configure the import alias for utils: › @/lib/utils\\n- Are you using React Server Components? › no / yes\\n\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"순서대로 아래와 같은 의미를 지닌다.\", \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"TypeScript 사용 여부\"), \"\\n\", React.createElement(_components.li, null, \"component style (default와 new-work이 존재함)\"), \"\\n\", React.createElement(_components.li, null, \"기반 color pallete\"), \"\\n\", React.createElement(_components.li, null, \"tailwind import 등이 들어갈 global css file\"), \"\\n\", React.createElement(_components.li, null, \"CSS variable 사용 여부\"), \"\\n\", React.createElement(_components.li, null, \"사용하는 tailwind prefix\"), \"\\n\", React.createElement(_components.li, null, \"tailwind config 위치\"), \"\\n\", React.createElement(_components.li, null, \"component가 저장될 path\"), \"\\n\", React.createElement(_components.li, null, \"utils 파일이 저장될 path\"), \"\\n\", React.createElement(_components.li, null, \"RSC 사용 여부\"), \"\\n\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"init 과정에서 \", React.createElement(_components.code, null, \"tailwindcss-animate\"), \", \", React.createElement(_components.code, null, \"class-variance-authority\"), \", \", React.createElement(_components.code, null, \"clsx\"), \" 같은 필수 library들이 자동으로 설치된다.\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, null, \"2. add component\"), \"\\n\", React.createElement(_components.p, null, \"설정이 완료되면 \", React.createElement(_components.code, null, \"npx shadcn-ui@latest add\"), \" 명령어로 원하는 컴포넌트를 설치하면 자동으로 컴포넌트가 init에서 설정한 컴포넌트 경로에 생성된다. 이제 자유롭게 설치된 컴포넌트를 사용하면 된다.\"), \"\\n\", React.createElement(_components.p, null, \"예를 들어 \", React.createElement(_components.code, null, \"npx shadcn-ui@latest add button\"), \"을 실행하면 설치되는 컴포넌트의 모습은 아래와 같다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-tsx\"\n  }, \"// src/components/ui/button.tsx\\n\\nimport * as React from \\\"react\\\"\\nimport { Slot } from \\\"@radix-ui/react-slot\\\"\\nimport { cva, type VariantProps } from \\\"class-variance-authority\\\"\\n\\nimport { cn } from \\\"@/lib/utils\\\"\\n\\nconst buttonVariants = cva(\\n  \\\"inline-flex items-center ...\\\",\\n  {\\n    variants: {\\n      variant: {\\n        default: \\\"bg-primary text-primary-foreground hover:bg-primary/90\\\",\\n        ...\\n      },\\n      size: {\\n        default: \\\"h-10 px-4 py-2\\\",\\n        ...\\n      },\\n    },\\n    defaultVariants: {\\n      variant: \\\"default\\\",\\n      size: \\\"default\\\",\\n    },\\n  }\\n)\\n\\nexport interface ButtonProps\\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\\n    VariantProps<typeof buttonVariants> {\\n  asChild?: boolean\\n}\\n\\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\\n    const Comp = asChild ? Slot : \\\"button\\\"\\n    return (\\n      <Comp\\n        className={cn(buttonVariants({ variant, size, className }))}\\n        ref={ref}\\n        {...props}\\n      />\\n    )\\n  }\\n)\\nButton.displayName = \\\"Button\\\"\\n\\nexport { Button, buttonVariants }\\n\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"@radix-ui/react-slot\"), \"는 add 명령어 실행 과정에서 자동으로 설치된다.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"아래처럼 바로 꺼내 쓰면 된다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-tsx\"\n  }, \"// Home.tsx\\n\\nimport { Button } from \\\"@/components/ui/button\\\";\\n  \\nexport default function Home() {\\n  const [count, setCount] = useState(0);\\n\\n  return (\\n    <div>\\n      <Button onClick={() => setCount(count + 1)}>Easy</Button>\\n    </div>\\n  );\\n}\\n\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"Button 컴포넌트 기반을 닦는 과정을 npx 명령어로 해결했다. 이제 스타일만 디자인에 맞게 손보면 된다.\"), \"\\n\"), \"\\n\", React.createElement(_components.h1, null, \"컴포넌트의 구성 방향\"), \"\\n\", React.createElement(_components.p, null, \"컴포넌트 구성은 스타일은 Tailwind CSS를 기반으로 하고, 기능은 Radix UI를 기반으로 한다고 단순하게 볼 수 있다.\"), \"\\n\", React.createElement(\"figure\", null, React.createElement(\"img\", {\n    src: \"https://manupa.dev/_next/image?url=%2Fimages%2Fblog%2Fposts%2Fanatomy-of-shadcn-ui%2Farchitecture-overview.png&w=3840&q=75\"\n  }), React.createElement(\"figcaption\", null, \"component architecture - anantomy of shadcn ui\")), \"\\n\", React.createElement(_components.p, null, \"컴포넌트 코드를 살펴보면 특이한 점을 한가지 발견할 수 있는데, 대부분 컴포넌트가 기능을 외부 React 라이브러리에 위임해 직접적인 구현을 최소로 하고 스타일링도 Tailwind CSS를 기반으로 기본적인 것만 처리한다.\"), \"\\n\", React.createElement(_components.p, null, \"이러한 구현 방식은 프로젝트 방향성을 생각하면 적절하면서도 어쩔 수 없는 부분이기도 하다. shadcn/ui 제작자의 \", React.createElement(_components.strong, null, \"직접적인 구현\"), \"이 많아지게 되면 \", React.createElement(_components.strong, null, \"코드의 소유권\"), \"을 사용자에게 넘기기 까다롭게 된다. 코드 인수인계하듯이 직접적인 구현 코드에 대한 설명이 shadcn/ui 레벨에서 필요하기 때문이다. 하지만 외부 React 라이브러리는 이미 그들이 잘 만들어둔 문서와 예제들이 많기 때문에, 설명할 필요 없이 사용자는 이를 직접 찾아보면 된다.\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"Don't reinvent the wheel\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"컴포넌트의 구현에 대한 자세한 내용은 아래 글에 잘 소개되어 있다. 자세한 내용을 알고 싶은 분들은 참조하면 좋을 것 같다.\\n\", React.createElement(OutLink, {\n    href: \"https://manupa.dev/blog/anatomy-of-shadcn-ui\"\n  }, \"The anatomy of shadcn/ui (https://manupa.dev/blog/anatomy-of-shadcn-ui)\")), \"\\n\", React.createElement(_components.h1, null, \"shadcn/ui 작동을 위한 프로젝트 구성 요소\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"shadcn/ui의 내부 코드가 궁금하지 않다면, 이 부분은 넘어가고 바로 \", React.createElement(\"a\", {\n    href: \"#고찰\",\n    \"data-not-blank\": true\n  }, \"고찰\"), \"로 이동을 추천한다.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(OutLink, {\n    href: \"http://github.com/shadcn/ui\"\n  }, \"shadcn/ui\"), \" 프로젝트를 작동할 수 있게 해주는 요소는 다음 네 가지로 나눠볼 수 있다. (CLI 사용 기준)\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"shadcn/ui config를 저장하는 components.json (Config)\"), \"\\n\", React.createElement(_components.li, null, \"컴포넌트가 기본적으로 사용하는 Tailwind CSS와 관련 라이브러리 및 유틸리티 함수 (Style)\"), \"\\n\", React.createElement(_components.li, null, \"원본 컴포넌트 코드 (Source)\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"init\"), \", \", React.createElement(_components.code, null, \"add\"), \" 명령어를 위한 script (CLI)\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"shadcn/ui의 시스템은 위 네 가지 요소로 작동하며 일반적인 컴포넌트 라이브러리와 비교하면 요소가 많다고 볼 수 있다. 하지만 전체 구성의 크기는 작기 때문에 복잡도가 높지 않다. 이제 하나씩 살펴보자.\"), \"\\n\", React.createElement(_components.h2, null, \"components.json\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"components.json\"), \"은 \", React.createElement(_components.code, null, \"init\"), \" 명령어에서 입력받은 프로젝트 설정(alias, 관련 파일들의 위치, rsc, tsx 사용 여부, 테마 등)을 담고 있다. CLI를 사용하려면 필요한 파일이다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-json\"\n  }, \"{\\n  \\\"$schema\\\": \\\"https://ui.shadcn.com/schema.json\\\",\\n  \\\"style\\\": \\\"default\\\",\\n  \\\"rsc\\\": false,\\n  \\\"tsx\\\": true,\\n  \\\"tailwind\\\": {\\n    \\\"config\\\": \\\"tailwind.config.js\\\",\\n    \\\"css\\\": \\\"src/index.css\\\",\\n    \\\"baseColor\\\": \\\"slate\\\",\\n    \\\"cssVariables\\\": true,\\n    \\\"prefix\\\": \\\"\\\"\\n  },\\n  \\\"aliases\\\": {\\n    \\\"components\\\": \\\"@/components\\\",\\n    \\\"utils\\\": \\\"@/lib/utils\\\"\\n  }\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"위 설정의 \", React.createElement(_components.code, null, \"style\"), \", \", React.createElement(_components.code, null, \"rsc\"), \", \", React.createElement(_components.code, null, \"tsx\"), \", \", React.createElement(_components.code, null, \"aliases\"), \", \", React.createElement(_components.code, null, \"tailwind\"), \" 같은 프로젝트 설정에 맞춰서 shadcn/ui에서 컴포넌트를 가져올 때 적절하게 transform 해서 설치를 하게 된다.\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"e.g. \", React.createElement(_components.code, null, \"tsx: false\"), \"면 소스 코드를 ts -> js로 변환해 jsx 확장자 파일로 저장한다.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"components.json\"), \" 파일의 구성에 대한 자세한 설명은 공식 문서에서 확인할 수 있다.\\n\", React.createElement(OutLink, {\n    href: \"https://ui.shadcn.com/docs/components-json\"\n  }, \"shadcn/ui (Docs > components.json)\")), \"\\n\", React.createElement(_components.h2, null, \"Tailwind CSS\"), \"\\n\", React.createElement(_components.p, null, \"styling에 사용되는 Tailwind CSS도 컴포넌트 사용에 필수적이며 기본적인 config, css, 연관 라이브러리, utils는 \", React.createElement(_components.code, null, \"init\"), \" 과정에서 세팅되므로, 크게 직접 설정할 부분은 없다.\"), \"\\n\", React.createElement(_components.p, null, \"프로젝트에서 관장하는 Tailwind CSS 연관 파일은 총 3개이다. 각 파일 모두 shadcn/ui가 관리하는 템플릿이 존재하며, \", React.createElement(_components.code, null, \"init\"), \" 과정에서 자동으로 템플릿이 설치된다.\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"tailwind config file\"), \"\\n\", React.createElement(_components.li, null, \"global css file\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"cn\"), \" helper가 들어있는 utils file\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"1.\"), \"과 \", React.createElement(_components.code, null, \"2.\"), \"는 Tailwind CSS 사용 시 필수적인 부분이므로 설명을 생략하고, \", React.createElement(_components.code, null, \"3.\"), \"에 대해 알아보자면 아래와 같은 \", React.createElement(_components.code, null, \"cn\"), \" 함수 하나 들어있는 유틸리티 파일이다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-ts\"\n  }, \"import { type ClassValue, clsx } from \\\"clsx\\\"\\nimport { twMerge } from \\\"tailwind-merge\\\"\\n\\nexport function cn(...inputs: ClassValue[]) {\\n  return twMerge(clsx(inputs))\\n}\\n\\n\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"특별한 기능은 없고 조건부로 Tailwind CSS 클래스를 쉽게 추가하기 위해 사용한다.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"clsx\"), \"는 객체, 배열 지원과 조건부 추가 등 \", React.createElement(_components.code, null, \"className\"), \" 사용을 편리하게 해주며 동적으로 \", React.createElement(_components.code, null, \"className\"), \" string을 생성한다.\", React.createElement(\"br\"), \"(e.g. \", React.createElement(_components.code, null, \"['c', 'b', 0, true && 'disabled', { foo: true }]\"), \" -> \", React.createElement(_components.code, null, \"'c b disabled foo'\"), \")\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"tailwind-merge\"), \"는 Tailwind 유틸리티 클래스의 중복과 충돌 제거 등을 처리한다.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"각 파일의 템플릿 소스는 아래와 같다.\"), \"\\n\", React.createElement(\"details\", null, React.createElement(\"summary\", null, React.createElement(OutLink, {\n    href: \"https://github.com/shadcn-ui/ui/blob/816b654f07b77c9c4c160ed42f0bb104592e3484/packages/cli/src/utils/templates.ts#L133-L172\"\n  }, \"tailwind config\")), React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-ts\"\n  }, \"export const TAILWIND_CONFIG_TS = `\\nimport type { Config } from \\\"tailwindcss\\\"\\n\\nconst config = {\\n  darkMode: [\\\"class\\\"],\\n  content: [\\n    ...\\n  ],\\n  prefix: \\\"<%- prefix %>\\\",\\n  theme: {\\n    container: {\\n      ...\\n    },\\n    extend: {\\n      keyframes: {\\n        ...\\n      },\\n      animation: {\\n        ...\\n      },\\n    },\\n  },\\n  plugins: [require(\\\"tailwindcss-animate\\\")],\\n} satisfies Config\\n\\nexport default config`\\n\"))), \"\\n\", React.createElement(\"details\", null, React.createElement(\"summary\", null, React.createElement(OutLink, {\n    href: \"https://github.com/shadcn-ui/ui/blob/816b654f07b77c9c4c160ed42f0bb104592e3484/packages/cli/src/utils/templates.ts#L1-L7\"\n  }, \"tailwind utils\")), React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-ts\"\n  }, \"export const UTILS = `import { type ClassValue, clsx } from \\\"clsx\\\"\\nimport { twMerge } from \\\"tailwind-merge\\\"\\n\\nexport function cn(...inputs: ClassValue[]) {\\n  return twMerge(clsx(inputs))\\n}\\n`\\n\"))), \"\\n\", React.createElement(\"details\", null, React.createElement(\"summary\", null, React.createElement(OutLink, {\n    href: \"https://github.com/shadcn-ui/ui/blob/816b654f07b77c9c4c160ed42f0bb104592e3484/apps/www/scripts/build-registry.mts#L374-L377\"\n  }, \"tailwind global css\")), React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-ts\"\n  }, \"  const BASE_STYLES = `@tailwind base;\\n  @tailwind components;\\n  @tailwind utilities;\\n  `\\n\"))), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"v0.8.0 기준 템플릿이 설치될 때 아래처럼 그냥 \", React.createElement(_components.code, null, \"fs.writeFile\"), \"을 때려버리기 때문에 기존 내용이 날아간다.\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-ts\"\n  }, \"await fs.writeFile(\\n  config.resolvedPaths.tailwindConfig,\\n  template(tailwindConfigTemplate)({\\n    extension,\\n    prefix: config.tailwind.prefix,\\n  }),\\n  \\\"utf8\\\"\\n)\\n\")), \"\\n\", React.createElement(_components.h2, null, \"원본 컴포넌트\"), \"\\n\", React.createElement(_components.p, null, \"원본 컴포넌트는 TypeScript와 빌드 결과물 JSON 두 가지 형태로 관리된다.\"), \"\\n\", React.createElement(\"figure\", null, React.createElement(\"img\", {\n    src: \"/shadcn-ui/component.png\"\n  })), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"1. TypeScript 원본 소스\")), \"\\n\", React.createElement(_components.p, null, \"원본 컴포넌트들은 Radix UI를 기반으로 RSC, TypeScript, Tailwind CSS, Path Alias가 모두 적용되어 있으며, \", React.createElement(_components.code, null, \"registry/<style>/ui/<name>.tsx\"), \" 경로에 저장된다. 여기서 \", React.createElement(_components.code, null, \"<style>\"), \"은 컴포넌트 스타일(default or new-york), \", React.createElement(_components.code, null, \"<name>\"), \"은 컴포넌트 이름을 나타낸다.\"), \"\\n\", React.createElement(_components.p, null, \"스타일별로 컴포넌트 소스 코드(스타일링)가 다르기 때문에, 동일한 타입의 컴포넌트여도 분리되어 있다.\"), \"\\n\", React.createElement(_components.p, null, \"e.g. \", React.createElement(OutLink, {\n    href: \"https://github.com/shadcn-ui/ui/blob/816b654f07b77c9c4c160ed42f0bb104592e3484/apps/www/registry/default/ui/button.tsx\"\n  }, \"registry/default/ui/button.tsx\")), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-tsx\"\n  }, \"import * as React from \\\"react\\\"\\nimport { Slot } from \\\"@radix-ui/react-slot\\\"\\nimport { cva, type VariantProps } from \\\"class-variance-authority\\\"\\n\\nimport { cn } from \\\"@/lib/utils\\\"\\n\\nconst buttonVariants = cva(\\n  \\\"inline-flex ...\\\",\\n  {\\n    variants: {\\n      ...\\n    },\\n    defaultVariants: {\\n      ...\\n    },\\n  }\\n)\\n\\nexport interface ButtonProps\\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\\n    VariantProps<typeof buttonVariants> {\\n  asChild?: boolean\\n}\\n\\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\\n    ...\\n  }\\n)\\nButton.displayName = \\\"Button\\\"\\n\\nexport { Button, buttonVariants }\\n\")), \"\\n\", React.createElement(_components.p, null, \"컴포넌트들을 프로젝트에 복붙하려면 컴포넌트 이름, 소스 코드, 필요한 의존성 등의 정보가 필요하다. 이를 효율적으로 관리하기 위해 별도 \", React.createElement(_components.strong, null, \"registry array\"), \"를 만들고, 컴포넌트 이름과 의존성 내역, 컴포넌트 구성 파일들의 경로를 관리한다.\", React.createElement(\"br\"), \"(배열이 파일 정적 분석을 통해 자동 생성되는 건 아니고 직접 작성하고 있다)\"), \"\\n\", React.createElement(OutLink, {\n    href: \"https://github.com/shadcn-ui/ui/blob/816b654f07b77c9c4c160ed42f0bb104592e3484/apps/www/registry/ui.ts\"\n  }, \"registry/ui.ts\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-ts\"\n  }, \"import { Registry } from \\\"@/registry/schema\\\"\\n\\nexport const ui: Registry = [\\n  {\\n    name: \\\"accordion\\\",\\n    type: \\\"components:ui\\\",\\n    dependencies: [\\\"@radix-ui/react-accordion\\\"],\\n    files: [\\\"ui/accordion.tsx\\\"],\\n  },\\n  {\\n    name: \\\"alert\\\",\\n    type: \\\"components:ui\\\",\\n    files: [\\\"ui/alert.tsx\\\"],\\n  },\\n  {\\n    name: \\\"alert-dialog\\\",\\n    type: \\\"components:ui\\\",\\n    dependencies: [\\\"@radix-ui/react-alert-dialog\\\"],\\n    registryDependencies: [\\\"button\\\"],\\n    files: [\\\"ui/alert-dialog.tsx\\\"],\\n  },\\n  ...\\n]\\n\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"name\"), \": 컴포넌트 이름\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"type\"), \": registry type (컴포넌트는 모두 \", React.createElement(_components.code, null, \"components:ui\"), \"이다)\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"dependencies\"), \": 컴포넌트 의존성 라이브러리 배열\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"registryDependencies\"), \": 컴포넌트 의존성 registry 배열 (e.g. \", React.createElement(_components.code, null, \"alert-dialog\"), \"의 경우 \", React.createElement(_components.code, null, \"button\"), \"을 사용하기 때문에 \", React.createElement(_components.code, null, \"button\"), \"이 포함되어 있다)\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"files\"), \": 컴포넌트에 필요한 파일들의 경로 (e.g. hooks가 추가로 필요하다면 해당 hooks 파일 경로도 files에 추가된다)\"), \"\\n\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, \"이후, 위 TypeScript 소스들을 기반으로 build 과정에서 실제로 CLI에 사용할 JSON 파일이 생성된다.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"2. Transformed JSON\")), \"\\n\", React.createElement(_components.p, null, \"component 코드와 registry array는 JSON 파일들로 변환되며, CLI의 파일 복붙과 의존성 설치에 사용되게 된다.\"), \"\\n\", React.createElement(_components.p, null, \"component json은 아래처럼 registry 정보에 \", React.createElement(_components.code, null, \"files\"), \"만 실제 소스 코드로 변환한 형태이다.\"), \"\\n\", React.createElement(OutLink, {\n    href: \"https://github.com/shadcn-ui/ui/blob/816b654f07b77c9c4c160ed42f0bb104592e3484/apps/www/public/registry/styles/default/button.json\"\n  }, \"public/registry/styles/default/button.json\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-json\"\n  }, \"{\\n  \\\"name\\\": \\\"button\\\",\\n  \\\"dependencies\\\": [\\n    \\\"@radix-ui/react-slot\\\"\\n  ],\\n  \\\"files\\\": [\\n    {\\n      \\\"name\\\": \\\"button.tsx\\\",\\n      \\\"content\\\": \\\"import * as React from \\\\\\\"react\\\\\\\"\\\\nimport { Slot } from \\\\\\\"@radix-ui/react-slot\\\\\\\"\\\\nimport { cva, type VariantProps } from \\\\\\\"class-variance-authority\\\\\\\"\\\\n\\\\nimport { cn } from \\\\\\\"@/lib/utils\\\\\\\" ... export { Button, buttonVariants }\\\\n\\\"\\n    }\\n  ],\\n  \\\"type\\\": \\\"components:ui\\\"\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"registry array는 원본과 동일하다.\"), \"\\n\", React.createElement(OutLink, {\n    href: \"https://github.com/shadcn-ui/ui/blob/816b654f07b77c9c4c160ed42f0bb104592e3484/apps/www/public/registry/index.json\"\n  }, \"registry/index.json\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-json\"\n  }, \"[\\n  {\\n    \\\"name\\\": \\\"accordion\\\",\\n    \\\"dependencies\\\": [\\n      \\\"@radix-ui/react-accordion\\\"\\n    ],\\n    \\\"files\\\": [\\n      \\\"ui/accordion.tsx\\\"\\n    ],\\n    \\\"type\\\": \\\"components:ui\\\"\\n  },\\n  {\\n    \\\"name\\\": \\\"alert\\\",\\n    \\\"files\\\": [\\n      \\\"ui/alert.tsx\\\"\\n    ],\\n    \\\"type\\\": \\\"components:ui\\\"\\n  },\\n  {\\n    \\\"name\\\": \\\"alert-dialog\\\",\\n    \\\"dependencies\\\": [\\n      \\\"@radix-ui/react-alert-dialog\\\"\\n    ],\\n    \\\"registryDependencies\\\": [\\n      \\\"button\\\"\\n    ],\\n    \\\"files\\\": [\\n      \\\"ui/alert-dialog.tsx\\\"\\n    ],\\n    \\\"type\\\": \\\"components:ui\\\"\\n  },\\n  ...\\n]\\n\")), \"\\n\", React.createElement(_components.p, null, \"위 JSON 정보를 기반으로 컴포넌트를 추가할 때 registry array에서 필요한 컴포넌트 정보를 찾고, 해당 정보를 바탕으로 프로젝트 style에 맞춰서 component json을 가져와서 의존성과 컴포넌트 files를 설치하게 되는 것이다.\"), \"\\n\", React.createElement(_components.h2, null, \"CLI script\"), \"\\n\", React.createElement(_components.p, null, \"CLI script는 project initialize, component add, component diff 총 세 가지 기능이 있다. init과 add 둘 다 shadcn/ui 문서에 수동으로 처리하는 방법이 나와 있기 때문에, 사실 꼭 사용할 필요는 없다. (\", React.createElement(OutLink, {\n    href: \"https://ui.shadcn.com/docs/installation/manual\"\n  }, \"Initialize > Manual\"), \", \", React.createElement(OutLink, {\n    href: \"https://ui.shadcn.com/docs/components/button#installation\"\n  }, \"Component Installation > Manual\"), \")\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"diff는 experimental 상태로 업데이트가 있는지(로컬 컴포넌트와 코드가 다른지) 체크하는 기능이다. 사실 컴포넌트 직접 수정을 해버리면 의미가 없긴 하다.\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, null, \"init\"), \"\\n\", React.createElement(_components.p, null, \"init 과정은 config 세팅과 템플릿, 필수 의존성 설치로 이루어져 있다.\"), \"\\n\", React.createElement(\"figure\", null, React.createElement(\"img\", {\n    src: \"/shadcn-ui/init.png\"\n  }), React.createElement(\"figcaption\", null, \"init process\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"1. 프로젝트 설정을 입력받는다.\")), \"\\n\", React.createElement(_components.p, null, React.createElement(OutLink, {\n    href: \"https://www.npmjs.com/package/prompts\"\n  }, \"prompts\"), \" 라이브러리를 사용해서 \", React.createElement(\"a\", {\n    href: \"#1-initialize\",\n    \"data-not-blank\": true\n  }, \"initialize\"), \"의 질문들이 프롬프트로 표시된다.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"2. tailwind config, global css, utils를 템플릿으로 세팅해 준다.\")), \"\\n\", React.createElement(_components.p, null, \"각각의 템플릿은 \", React.createElement(\"a\", {\n    href: \"#tailwind-css\",\n    \"data-not-blank\": true\n  }, \"#tailwind-css\"), \"에서 확인할 수 있다.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"3. 필수 의존성을 설치해 준다.\")), \"\\n\", React.createElement(_components.p, null, \"사용에 필요한 필수 의존성을 설치한다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"tailwindcss-animate\"), \"\\n\", React.createElement(_components.li, null, \"class-variance-authority\"), \"\\n\", React.createElement(_components.li, null, \"clsx\"), \"\\n\", React.createElement(_components.li, null, \"tailwind-merge\"), \"\\n\", React.createElement(_components.li, null, \"project style이 \", React.createElement(_components.code, null, \"default\"), \"면 \", React.createElement(_components.code, null, \"lucide-react\"), \", \", React.createElement(_components.code, null, \"new-work\"), \"이면 \", React.createElement(_components.code, null, \"@radix-ui/react-icons\"), \"을 설치한다.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"위와 같이 과정이 매우 간단하며 실제 소스 코드는 \", React.createElement(OutLink, {\n    href: \"https://github.com/shadcn-ui/ui/blob/816b654f07b77c9c4c160ed42f0bb104592e3484/packages/cli/src/commands/init.ts#L56\"\n  }, \"cli/src/commands/init.ts\"), \"에서 확인 가능하다.\"), \"\\n\", React.createElement(_components.h3, null, \"add\"), \"\\n\", React.createElement(\"figure\", null, React.createElement(\"img\", {\n    src: \"/shadcn-ui/add.png\"\n  }), React.createElement(\"figcaption\", null, \"add process\")), \"\\n\", React.createElement(_components.p, null, \"add도 필요한 컴포넌트 정보를 가져와서 설치만 하면 되기 때문에 간단하다.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"1. 입력받은 컴포넌트 정보를 registry array json에서 가져온다.\")), \"\\n\", React.createElement(_components.p, null, \"예를 들어 \", React.createElement(_components.code, null, \"npx shadcn-ui@latest add alert-dialog\"), \"를 실행하면 다음처럼 \", React.createElement(_components.code, null, \"registryDependency\"), \"인 button도 함께 정보를 가져온다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-json\"\n  }, \"[\\n  {\\n    \\\"name\\\": \\\"alert-dialog\\\",\\n    \\\"dependencies\\\": [\\n      \\\"@radix-ui/react-alert-dialog\\\"\\n    ],\\n    \\\"registryDependencies\\\": [\\n      \\\"button\\\"\\n    ],\\n    \\\"files\\\": [\\n      \\\"ui/alert-dialog.tsx\\\"\\n    ],\\n    \\\"type\\\": \\\"components:ui\\\"\\n  },\\n  {\\n    \\\"name\\\": \\\"button\\\",\\n    \\\"dependencies\\\": [\\n      \\\"@radix-ui/react-slot\\\"\\n    ],\\n    \\\"files\\\": [\\n      \\\"ui/button.tsx\\\"\\n    ],\\n    \\\"type\\\": \\\"components:ui\\\"\\n  }\\n]\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"2. project style을 기반으로 컴포넌트 json을 가져온다.\")), \"\\n\", React.createElement(_components.p, null, \"registry array에서 추가할 컴포넌트 정보들을 찾은 뒤에는 project style에 맞춰 컴포넌트 json을 가져온다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"// registry/styles/default/alert-dialog.json\\n{\\n  \\\"name\\\": \\\"alert-dialog\\\",\\n  \\\"dependencies\\\": [\\n    \\\"@radix-ui/react-alert-dialog\\\"\\n  ],\\n  \\\"registryDependencies\\\": [\\n    \\\"button\\\"\\n  ],\\n  \\\"files\\\": [\\n    {\\n      \\\"name\\\": \\\"alert-dialog.tsx\\\",\\n      \\\"content\\\": \\\"import * as React from \\\\\\\"react\\\\\\\"\\\\n...const Button = React.forwardRef...export { Button, buttonVariants }\\\\n\\\"\\n    }\\n  ],\\n  \\\"type\\\": \\\"components:ui\\\"\\n}\\n// registry/styles/default/button.json\\n{\\n  \\\"name\\\": \\\"button\\\",\\n  \\\"dependencies\\\": [\\n    \\\"@radix-ui/react-slot\\\"\\n  ],\\n  \\\"files\\\": [\\n    {\\n      \\\"name\\\": \\\"button.tsx\\\",\\n      \\\"content\\\": \\\"\\\\\\\"use client\\\\\\\"\\\\n\\\\n...export {\\\\n  AlertDialog...\\\"\\n    }\\n  ],\\n  \\\"type\\\": \\\"components:ui\\\"\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"3. files를 순회하며 파일 저장 및 의존성 설치를 한다.\")), \"\\n\", React.createElement(_components.p, null, \"각 파일의 내용을 프로젝트에 저장하고, 의존성을 설치한다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-ts\"\n  }, \"for (const file of files) {\\n  let filePath = path.resolve(targetDir, file.name)\\n\\n  // Run transformers.\\n  const content = await transform({\\n    filename: file.name,\\n    raw: file.content,\\n    config,\\n    baseColor,\\n  })\\n\\n  if (!config.tsx) {\\n    filePath = filePath.replace(/\\\\.tsx$/, \\\".jsx\\\")\\n    filePath = filePath.replace(/\\\\.ts$/, \\\".js\\\")\\n  }\\n\\n  await fs.writeFile(filePath, content)\\n}\\n\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"targetDir\"), \"은 사실상 \", React.createElement(_components.code, null, \"components.json\"), \"의 \", React.createElement(_components.code, null, \"aliases.components\"), \" 경로를 나타낸다.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"transform\"), \" 함수에서 config에 맞게 file content를 변환한다.\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-ts\"\n  }, \"const packageManager = await getPackageManager(cwd)\\n\\nif (item.dependencies?.length) {\\n  await execa(\\n    packageManager,\\n    [\\n      packageManager === \\\"npm\\\" ? \\\"install\\\" : \\\"add\\\",\\n      ...item.dependencies,\\n    ],\\n    {\\n      cwd,\\n    }\\n  )\\n}\\n\\n// Install devDependencies.\\nif (item.devDependencies?.length) {\\n  await execa(\\n    packageManager,\\n    [\\n      packageManager === \\\"npm\\\" ? \\\"install\\\" : \\\"add\\\",\\n      \\\"-D\\\",\\n      ...item.devDependencies,\\n    ],\\n    {\\n      cwd,\\n    }\\n  )\\n}\\n\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"execa\"), \"는 command를 실행해 주는 lib이다.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"packageManager\"), \"를 가져와서 그에 맞는 명령어로 \", React.createElement(_components.code, null, \"dependencies\"), \"를 설치한다.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"실제 소스는 \", React.createElement(OutLink, {\n    href: \"https://github.com/shadcn-ui/ui/blob/816b654f07b77c9c4c160ed42f0bb104592e3484/packages/cli/src/commands/add.ts#L44\"\n  }, \"cli/src/commands/add.ts\"), \"에서 확인 가능하다.\"), \"\\n\", React.createElement(_components.h1, null, \"고찰\"), \"\\n\", React.createElement(_components.p, null, \"shadcn/ui 프로젝트가 어떻게 시작된 건지는 알 수 없지만, 컴포넌트를 복붙해서 쓰는 컬렉션 형태로 React 컴포넌트 프로젝트를 생각했다는 게 대단하다. shadcn/ui를 알아보면서 이런 형태의 프로젝트 컨셉이 기존에 가지고 있던 생각의 프레임을 많이 벗어나 있어서 생각의 성장에 도움이 되었다.\"), \"\\n\", React.createElement(_components.p, null, \"대부분의 현업 프로젝트는 내부적인 디자인 시스템과 컴포넌트가 존재하는데 그런 환경의 기반을 닦는데 shadcn/ui가 매우 최적화된 프로젝트라 생각한다. 새로운 웹 프로젝트를 만드는데 디자인이 존재한다면 shadcn/ui로 시작하지 않을까? 물론 단순 internal이거나 디자인 맞출 필요가 크게 없는 프로젝트면 장점이 많이 사라져서 다른 기술들과 차용을 고민해 볼 것 같다.\"), \"\\n\", React.createElement(_components.h1, null, \"참고\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(OutLink, {\n    href: \"https://github.com/shadcn-ui/ui\"\n  }, \"shadcn/ui Github source code\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(OutLink, {\n    href: \"https://ui.shadcn.com/\"\n  }, \"shadcn/ui Official Documentation\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(OutLink, {\n    href: \"https://manupa.dev/blog/anatomy-of-shadcn-ui\"\n  }, \"The anatomy of shadcn/ui\"), \"\\n\"), \"\\n\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"/Users/Shared/pyjun01.github.io/src/blog/shadcn-ui.mdx\";\nimport {graphql} from 'gatsby';\nimport {MDXProvider} from '@mdx-js/react';\nimport styled from 'styled-components';\nimport {Tweet, CodeSandbox} from 'mdx-embed';\nimport Layout from '../../components/layout';\nimport SEO from '../../components/seo';\nimport CodeBlock from '../../components/MDX/CodeBlock';\nimport {H1, H2, H3, H4, H5, H6} from '../../components/MDX/Title';\nimport {A} from '../../components/MDX';\nimport TableOfContents from '../../components/blog/TableOfContents';\nconst components = {\n  Tweet,\n  CodeSandbox\n};\nconst Container = (styled.div)`\n  padding: 32px 0;\n\n  > h2 {\n    margin: 0;\n    font-size: 3rem;\n    line-height: 3.75rem;\n    letter-spacing: -0.0625rem;\n    font-weight: 100;\n    font-family: Georgia, Times, serif;\n  }\n\n  > .date {\n    margin: 32px 0 56px;\n    text-align: right;\n  }\n\n  img {\n    max-width: 100%;\n  }\n\n  figure {\n    margin: 1.5rem 0;\n\n    img {\n      display: block;\n      margin: 0 auto;\n    }\n\n    figcaption {\n      font-size: 0.875rem;\n      color: #757575;\n      text-align: center;\n    }\n  }\n\n  @media (max-width: 680px) {\n    > .date {\n      font-size: 1.3rem;\n    }\n\n    > .content {\n      font-size: 1.5rem;\n      line-height: 2.25rem;\n    }\n  }\n`;\nfunction BlogPost({data, children}) {\n  return React.createElement(Layout, {\n    pageTitle: data.mdx.frontmatter.title\n  }, React.createElement(SEO, {\n    title: data.mdx.frontmatter.title,\n    description: data.mdx.frontmatter.preview,\n    slug: data.mdx.frontmatter.slug\n  }), React.createElement(Container, null, React.createElement(\"h2\", null, data.mdx.frontmatter.title), React.createElement(\"p\", {\n    className: \"date\"\n  }, data.mdx.frontmatter.date), React.createElement(\"div\", {\n    className: \"content\"\n  }, React.createElement(MDXProvider, {\n    components: {\n      pre: CodeBlock,\n      a: A,\n      h1: H1,\n      h2: H2,\n      h3: H3,\n      h4: H4,\n      h5: H5,\n      h6: H6,\n      TableOfContents: props => React.createElement(TableOfContents, Object.assign({}, props, {\n        headings: data.mdx.headings\n      })),\n      ...components\n    }\n  }, children))), React.createElement(\"img\", {\n    src: `https://hits.seeyoufarm.com/api/count/incr/badge.svg?url=https%3A%2F%2Fpyjun01.github.io/v/${data.mdx.frontmatter.slug}&count_bg=%2379C83D&title_bg=%23555555&icon=&icon_color=%23E7E7E7&title=hits&edge_flat=false`,\n    style: {\n      opacity: 0\n    }\n  }));\n}\nexport const query = graphql`\n  query ($id: String) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n        date(formatString: \"MMMM D, YYYY\")\n        preview\n        tag\n        slug\n      }\n      headings {\n        value\n        depth\n      }\n    }\n  }\n`;\nBlogPost\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(BlogPost, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n"],"names":["OutLink","props","_jsx","Object","assign","target","rel","_createMdxContent","_components","p","a","h1","strong","blockquote","em","code","ul","li","h2","h3","pre","ol","_provideComponents","components","TableOfContents","id","component","Error","_missingMdxReference","React","src","href","media","srcset","alt","className","wrapper","MDXLayout","Tweet","CodeSandbox","Container","styled","div","withConfig","displayName","componentId","BlogPost","_ref","data","children","Layout","pageTitle","mdx","frontmatter","title","SEO","description","preview","slug","date","MDXProvider","CodeBlock","A","H1","H2","H3","h4","H4","h5","H5","h6","H6","headings","style","opacity","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}